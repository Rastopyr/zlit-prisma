// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregatePerson {
  count: Int!
}

type AggregatePlanet {
  count: Int!
}

type AggregateStarship {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

enum Episode {
  NEWHOPE
  EMPIRE
  JEDI
}

enum Gender {
  MALE
  FEMALE
}

scalar Long

type Mutation {
  createPerson(data: PersonCreateInput!): Person!
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  updateManyPersons(data: PersonUpdateManyMutationInput!, where: PersonWhereInput): BatchPayload!
  upsertPerson(where: PersonWhereUniqueInput!, create: PersonCreateInput!, update: PersonUpdateInput!): Person!
  deletePerson(where: PersonWhereUniqueInput!): Person
  deleteManyPersons(where: PersonWhereInput): BatchPayload!
  createPlanet(data: PlanetCreateInput!): Planet!
  updatePlanet(data: PlanetUpdateInput!, where: PlanetWhereUniqueInput!): Planet
  updateManyPlanets(data: PlanetUpdateManyMutationInput!, where: PlanetWhereInput): BatchPayload!
  upsertPlanet(where: PlanetWhereUniqueInput!, create: PlanetCreateInput!, update: PlanetUpdateInput!): Planet!
  deletePlanet(where: PlanetWhereUniqueInput!): Planet
  deleteManyPlanets(where: PlanetWhereInput): BatchPayload!
  createStarship(data: StarshipCreateInput!): Starship!
  updateStarship(data: StarshipUpdateInput!, where: StarshipWhereUniqueInput!): Starship
  updateManyStarships(data: StarshipUpdateManyMutationInput!, where: StarshipWhereInput): BatchPayload!
  upsertStarship(where: StarshipWhereUniqueInput!, create: StarshipCreateInput!, update: StarshipUpdateInput!): Starship!
  deleteStarship(where: StarshipWhereUniqueInput!): Starship
  deleteManyStarships(where: StarshipWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Person {
  id: ID!
  name: String!
  gender: Gender
  isDroid: Boolean!
  createdAt: DateTime!
  updated: DateTime!
  firstAppersIn: Episode!
  appersIn: [Episode!]!
  starships(where: StarshipWhereInput, orderBy: StarshipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Starship!]
  friends(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person!]
  planet: Planet
}

type PersonConnection {
  pageInfo: PageInfo!
  edges: [PersonEdge]!
  aggregate: AggregatePerson!
}

input PersonCreateappersInInput {
  set: [Episode!]
}

input PersonCreateInput {
  id: ID
  name: String!
  gender: Gender
  isDroid: Boolean
  firstAppersIn: Episode
  appersIn: PersonCreateappersInInput
  starships: StarshipCreateManyInput
  friends: PersonCreateManyInput
  planet: PlanetCreateOneInput
}

input PersonCreateManyInput {
  create: [PersonCreateInput!]
  connect: [PersonWhereUniqueInput!]
}

type PersonEdge {
  node: Person!
  cursor: String!
}

enum PersonOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  gender_ASC
  gender_DESC
  isDroid_ASC
  isDroid_DESC
  createdAt_ASC
  createdAt_DESC
  updated_ASC
  updated_DESC
  firstAppersIn_ASC
  firstAppersIn_DESC
}

type PersonPreviousValues {
  id: ID!
  name: String!
  gender: Gender
  isDroid: Boolean!
  createdAt: DateTime!
  updated: DateTime!
  firstAppersIn: Episode!
  appersIn: [Episode!]!
}

input PersonScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  isDroid: Boolean
  isDroid_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updated: DateTime
  updated_not: DateTime
  updated_in: [DateTime!]
  updated_not_in: [DateTime!]
  updated_lt: DateTime
  updated_lte: DateTime
  updated_gt: DateTime
  updated_gte: DateTime
  firstAppersIn: Episode
  firstAppersIn_not: Episode
  firstAppersIn_in: [Episode!]
  firstAppersIn_not_in: [Episode!]
  AND: [PersonScalarWhereInput!]
  OR: [PersonScalarWhereInput!]
  NOT: [PersonScalarWhereInput!]
}

type PersonSubscriptionPayload {
  mutation: MutationType!
  node: Person
  updatedFields: [String!]
  previousValues: PersonPreviousValues
}

input PersonSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PersonWhereInput
  AND: [PersonSubscriptionWhereInput!]
  OR: [PersonSubscriptionWhereInput!]
  NOT: [PersonSubscriptionWhereInput!]
}

input PersonUpdateappersInInput {
  set: [Episode!]
}

input PersonUpdateDataInput {
  name: String
  gender: Gender
  isDroid: Boolean
  firstAppersIn: Episode
  appersIn: PersonUpdateappersInInput
  starships: StarshipUpdateManyInput
  friends: PersonUpdateManyInput
  planet: PlanetUpdateOneInput
}

input PersonUpdateInput {
  name: String
  gender: Gender
  isDroid: Boolean
  firstAppersIn: Episode
  appersIn: PersonUpdateappersInInput
  starships: StarshipUpdateManyInput
  friends: PersonUpdateManyInput
  planet: PlanetUpdateOneInput
}

input PersonUpdateManyDataInput {
  name: String
  gender: Gender
  isDroid: Boolean
  firstAppersIn: Episode
  appersIn: PersonUpdateappersInInput
}

input PersonUpdateManyInput {
  create: [PersonCreateInput!]
  update: [PersonUpdateWithWhereUniqueNestedInput!]
  upsert: [PersonUpsertWithWhereUniqueNestedInput!]
  delete: [PersonWhereUniqueInput!]
  connect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
  disconnect: [PersonWhereUniqueInput!]
  deleteMany: [PersonScalarWhereInput!]
  updateMany: [PersonUpdateManyWithWhereNestedInput!]
}

input PersonUpdateManyMutationInput {
  name: String
  gender: Gender
  isDroid: Boolean
  firstAppersIn: Episode
  appersIn: PersonUpdateappersInInput
}

input PersonUpdateManyWithWhereNestedInput {
  where: PersonScalarWhereInput!
  data: PersonUpdateManyDataInput!
}

input PersonUpdateWithWhereUniqueNestedInput {
  where: PersonWhereUniqueInput!
  data: PersonUpdateDataInput!
}

input PersonUpsertWithWhereUniqueNestedInput {
  where: PersonWhereUniqueInput!
  update: PersonUpdateDataInput!
  create: PersonCreateInput!
}

input PersonWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  isDroid: Boolean
  isDroid_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updated: DateTime
  updated_not: DateTime
  updated_in: [DateTime!]
  updated_not_in: [DateTime!]
  updated_lt: DateTime
  updated_lte: DateTime
  updated_gt: DateTime
  updated_gte: DateTime
  firstAppersIn: Episode
  firstAppersIn_not: Episode
  firstAppersIn_in: [Episode!]
  firstAppersIn_not_in: [Episode!]
  starships_every: StarshipWhereInput
  starships_some: StarshipWhereInput
  starships_none: StarshipWhereInput
  friends_every: PersonWhereInput
  friends_some: PersonWhereInput
  friends_none: PersonWhereInput
  planet: PlanetWhereInput
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
}

input PersonWhereUniqueInput {
  id: ID
  name: String
}

type Planet {
  id: ID!
  name: String!
  mass: Int!
}

type PlanetConnection {
  pageInfo: PageInfo!
  edges: [PlanetEdge]!
  aggregate: AggregatePlanet!
}

input PlanetCreateInput {
  id: ID
  name: String!
  mass: Int
}

input PlanetCreateOneInput {
  create: PlanetCreateInput
  connect: PlanetWhereUniqueInput
}

type PlanetEdge {
  node: Planet!
  cursor: String!
}

enum PlanetOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  mass_ASC
  mass_DESC
}

type PlanetPreviousValues {
  id: ID!
  name: String!
  mass: Int!
}

type PlanetSubscriptionPayload {
  mutation: MutationType!
  node: Planet
  updatedFields: [String!]
  previousValues: PlanetPreviousValues
}

input PlanetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlanetWhereInput
  AND: [PlanetSubscriptionWhereInput!]
  OR: [PlanetSubscriptionWhereInput!]
  NOT: [PlanetSubscriptionWhereInput!]
}

input PlanetUpdateDataInput {
  name: String
  mass: Int
}

input PlanetUpdateInput {
  name: String
  mass: Int
}

input PlanetUpdateManyMutationInput {
  name: String
  mass: Int
}

input PlanetUpdateOneInput {
  create: PlanetCreateInput
  update: PlanetUpdateDataInput
  upsert: PlanetUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: PlanetWhereUniqueInput
}

input PlanetUpsertNestedInput {
  update: PlanetUpdateDataInput!
  create: PlanetCreateInput!
}

input PlanetWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  mass: Int
  mass_not: Int
  mass_in: [Int!]
  mass_not_in: [Int!]
  mass_lt: Int
  mass_lte: Int
  mass_gt: Int
  mass_gte: Int
  AND: [PlanetWhereInput!]
  OR: [PlanetWhereInput!]
  NOT: [PlanetWhereInput!]
}

input PlanetWhereUniqueInput {
  id: ID
  name: String
}

type Query {
  person(where: PersonWhereUniqueInput!): Person
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person]!
  personsConnection(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection!
  planet(where: PlanetWhereUniqueInput!): Planet
  planets(where: PlanetWhereInput, orderBy: PlanetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Planet]!
  planetsConnection(where: PlanetWhereInput, orderBy: PlanetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlanetConnection!
  starship(where: StarshipWhereUniqueInput!): Starship
  starships(where: StarshipWhereInput, orderBy: StarshipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Starship]!
  starshipsConnection(where: StarshipWhereInput, orderBy: StarshipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StarshipConnection!
  node(id: ID!): Node
}

type Starship {
  id: ID!
  name: String!
  coordinates: [Float!]!
  speed: Int!
}

type StarshipConnection {
  pageInfo: PageInfo!
  edges: [StarshipEdge]!
  aggregate: AggregateStarship!
}

input StarshipCreatecoordinatesInput {
  set: [Float!]
}

input StarshipCreateInput {
  id: ID
  name: String!
  coordinates: StarshipCreatecoordinatesInput
  speed: Int
}

input StarshipCreateManyInput {
  create: [StarshipCreateInput!]
  connect: [StarshipWhereUniqueInput!]
}

type StarshipEdge {
  node: Starship!
  cursor: String!
}

enum StarshipOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  speed_ASC
  speed_DESC
}

type StarshipPreviousValues {
  id: ID!
  name: String!
  coordinates: [Float!]!
  speed: Int!
}

input StarshipScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  speed: Int
  speed_not: Int
  speed_in: [Int!]
  speed_not_in: [Int!]
  speed_lt: Int
  speed_lte: Int
  speed_gt: Int
  speed_gte: Int
  AND: [StarshipScalarWhereInput!]
  OR: [StarshipScalarWhereInput!]
  NOT: [StarshipScalarWhereInput!]
}

type StarshipSubscriptionPayload {
  mutation: MutationType!
  node: Starship
  updatedFields: [String!]
  previousValues: StarshipPreviousValues
}

input StarshipSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StarshipWhereInput
  AND: [StarshipSubscriptionWhereInput!]
  OR: [StarshipSubscriptionWhereInput!]
  NOT: [StarshipSubscriptionWhereInput!]
}

input StarshipUpdatecoordinatesInput {
  set: [Float!]
}

input StarshipUpdateDataInput {
  name: String
  coordinates: StarshipUpdatecoordinatesInput
  speed: Int
}

input StarshipUpdateInput {
  name: String
  coordinates: StarshipUpdatecoordinatesInput
  speed: Int
}

input StarshipUpdateManyDataInput {
  name: String
  coordinates: StarshipUpdatecoordinatesInput
  speed: Int
}

input StarshipUpdateManyInput {
  create: [StarshipCreateInput!]
  update: [StarshipUpdateWithWhereUniqueNestedInput!]
  upsert: [StarshipUpsertWithWhereUniqueNestedInput!]
  delete: [StarshipWhereUniqueInput!]
  connect: [StarshipWhereUniqueInput!]
  set: [StarshipWhereUniqueInput!]
  disconnect: [StarshipWhereUniqueInput!]
  deleteMany: [StarshipScalarWhereInput!]
  updateMany: [StarshipUpdateManyWithWhereNestedInput!]
}

input StarshipUpdateManyMutationInput {
  name: String
  coordinates: StarshipUpdatecoordinatesInput
  speed: Int
}

input StarshipUpdateManyWithWhereNestedInput {
  where: StarshipScalarWhereInput!
  data: StarshipUpdateManyDataInput!
}

input StarshipUpdateWithWhereUniqueNestedInput {
  where: StarshipWhereUniqueInput!
  data: StarshipUpdateDataInput!
}

input StarshipUpsertWithWhereUniqueNestedInput {
  where: StarshipWhereUniqueInput!
  update: StarshipUpdateDataInput!
  create: StarshipCreateInput!
}

input StarshipWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  speed: Int
  speed_not: Int
  speed_in: [Int!]
  speed_not_in: [Int!]
  speed_lt: Int
  speed_lte: Int
  speed_gt: Int
  speed_gte: Int
  AND: [StarshipWhereInput!]
  OR: [StarshipWhereInput!]
  NOT: [StarshipWhereInput!]
}

input StarshipWhereUniqueInput {
  id: ID
}

type Subscription {
  person(where: PersonSubscriptionWhereInput): PersonSubscriptionPayload
  planet(where: PlanetSubscriptionWhereInput): PlanetSubscriptionPayload
  starship(where: StarshipSubscriptionWhereInput): StarshipSubscriptionPayload
}
`